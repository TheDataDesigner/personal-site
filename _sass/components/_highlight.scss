
// COMPONENTS / HIGHLIGHT
// -----------------------------------------------------------------------------


pre {
  overflow: auto;
  display: block;
  word-break: break-all;
  word-wrap: break-word;
}

code {
  border: 1px solid getColor(neutral, light);
  border-radius: .2rem;
  font-size: getSize(small);
  background: getColor-rgba(.2, neutral, light);
  padding: .2rem .4rem;
  white-space: nowrap;

  pre & {
    display: block;
    margin: 1rem auto 2rem;
    padding: 1rem;
    max-width: 34rem;
    overflow: hidden;
    white-space: pre;
    overflow: auto;
    word-wrap: normal;

    span {
      word-break: break-all;
    }
  }
}

.highlight {
  code {
    position: relative;
    &::before {
      content: attr(data-lang);
      position: absolute;
      top: 0;
      right: 0;
      color: getColor(neutral, darkest);
      font-family: getFont(secondary);
      text-align: right;
      text-transform: uppercase;
      font-size: .6rem;
      padding: .25rem .25rem 0 0;
      line-height: 1.5;
      height: 1.5rem;
      font-weight: getWeight(bold);
      letter-spacing: .1em;
    }
  }

  .hll { background-color: #ffffcc }
  .c { color: getColor(neutral); font-style: italic } /* Comment */
  .err { color: getColor(status, error); background-color: #e3d2d2 } /* Error */
  .k { color: getColor(neutral,darkest); } /* Keyword */
  .o { color: getColor(neutral,darkest);} /* Operator */
  .cm { color: getColor(neutral); font-style: italic } /* Comment.Multiline */
  .cp { color: getColor(neutral); font-style: italic } /* Comment.Preproc */
  .c1 { color: getColor(neutral); font-style: italic } /* Comment.Single */
  .cs { color: getColor(neutral); font-style: italic } /* Comment.Special */
  .gd { color: getColor(neutral,darkest); background-color: #ffdddd } /* Generic.Deleted */
  .ge { color: getColor(neutral,darkest); font-style: italic } /* Generic.Emph */
  .gr { color: getColor(status, error) } /* Generic.Error */
  .gh { color: getColor(neutral); } /* Generic.Heading */
  .gi { color: getColor(neutral,darkest); background-color: #ddffdd } /* Generic.Inserted */
  .go { color: getColor(neutral); } /* Generic.Output */
  .gp { color: getColor(neutral); } /* Generic.Prompt */
  .gs {} /* Generic.Strong */
  .gu { color: getColor(neutral); } /* Generic.Subheading */
  .gt { color: getColor(status, error) } /* Generic.Traceback */
  .kc { color: getColor(neutral,darkest);} /* Keyword.Constant */
  .kd { color: getColor(neutral,darkest);} /* Keyword.Declaration */
  .kn { color: getColor(neutral,darkest);} /* Keyword.Namespace */
  .kp { color: getColor(neutral,darkest);} /* Keyword.Pseudo */
  .kr { color: getColor(neutral,darkest);} /* Keyword.Reserved */
  .kt { color: getColor(secondary);} /* Keyword.Type */
  .m { color: getColor(secondary); } /* Literal.Number */
  .s { color: getColor(status, success) } /* Literal.String */
  .n { color: getColor(neutral, darkest) }
  .na { color: getColor(secondary); } /* Name.Attribute */
  .nb { color: getColor(secondary); } /* Name.Builtin */
  .nc { color: getColor(secondary);} /* Name.Class */
  .no { color: getColor(secondary); } /* Name.Constant */
  .nd { color: getColor(secondary);} /* Name.Decorator */
  .ni { color: getColor(status, error) } /* Name.Entity */
  .ne { color: getColor(status, error);} /* Name.Exception */
  .nf { color: getColor(status, error);} /* Name.Function */
  .nl { color: getColor(status, error);} /* Name.Label */
  .nn { color: getColor(neutral); } /* Name.Namespace */
  .nt { color: getColor(secondary); } /* Name.Tag */
  .nv { color: getColor(secondary); } /* Name.Variable */
  .ow { color: getColor(neutral,darkest);} /* Operator.Word */
  .w { color: getColor(neutral); } /* Text.Whitespace */
  .mf { color: getColor(secondary); } /* Literal.Number.Float */
  .mh { color: getColor(secondary); } /* Literal.Number.Hex */
  .mi { color: getColor(secondary); } /* Literal.Number.Integer */
  .mo { color: getColor(secondary); } /* Literal.Number.Oct */
  .sb { color: getColor(status, success) } /* Literal.String.Backtick */
  .sc { color: getColor(status, success) } /* Literal.String.Char */
  .sd { color: getColor(status, success) } /* Literal.String.Doc */
  .s2 { color: getColor(status, success) } /* Literal.String.Double */
  .se { color: getColor(status, success) } /* Literal.String.Escape */
  .sh { color: getColor(status, success) } /* Literal.String.Heredoc */
  .si { color: getColor(status, success) } /* Literal.String.Interpol */
  .sx { color: getColor(status, success) } /* Literal.String.Other */
  .sr { color: getColor(status, success) } /* Literal.String.Regex */
  .s1 { color: getColor(status, success) } /* Literal.String.Single */
  .ss { color: getColor(status, success) } /* Literal.String.Symbol */
  .bp { color: getColor(neutral); } /* Name.Builtin.Pseudo */
  .vc { color: getColor(secondary); } /* Name.Variable.Class */
  .vg { color: getColor(secondary); } /* Name.Variable.Global */
  .vi { color: getColor(secondary); } /* Name.Variable.Instance */
  .il { color: getColor(secondary); } /* Literal.Number.Integer.Long */
}
